!function(t,e){t.getElementById("livereloadscript")||((e=t.createElement("script")).async=1,e.src="//"+(window.location.host||"localhost").split(":")[0]+":35729/livereload.js?snipver=1",e.id="livereloadscript",t.getElementsByTagName("head")[0].appendChild(e))}(window.document),function(t){"function"==typeof define&&define.amd?define(t):t()}((function(){"use strict";!function(t,e){void 0===e&&(e={});var n=e.insertAt;if(t&&"undefined"!=typeof document){var o=document.head||document.getElementsByTagName("head")[0],s=document.createElement("style");s.type="text/css","top"===n&&o.firstChild?o.insertBefore(s,o.firstChild):o.appendChild(s),s.styleSheet?s.styleSheet.cssText=t:s.appendChild(document.createTextNode(t))}}(":root {\r\n\t--menu-function-item-height: 26px;\r\n\t--menu-function-item-whitespace: 26px;\r\n\r\n\t--menu-background-color: #999;\r\n\t--menu-frontground-color: #DDD;\r\n\t--menu-active-background-color: #66F;\r\n\t--menu-active-frontground-color: #fff;\r\n\t--menu-disabled-background-color: 'transparent';\r\n\t--menu-disabled-frontground-color: #999;\r\n\r\n\t--menu-outline-color: #000;\r\n\r\n\t--menu-spearator-color: #ccc;\r\n\t--menu-spearator-whitespace-x: 13px;\r\n\t--menu-whitespace-y: 5px;\r\n}\r\n\r\nspan.menu-item-expanding::before {\r\n\tcontent: '>';\r\n}");const t=document,e=window;function n(t,e,n){t.addEventListener(e,n)}function o(e){return t.createElement(e)}function s(t,...e){for(const n of e)for(const e in n)t.style.setProperty(e,n[e])}function i(t,e){t.appendChild(e)}function r(t,...e){t.classList.add(...e)}function c(t,e=null){const n=new Event(t,{bubbles:!0});return n.data=e,n}function a(t,e){t.dispatchEvent(e)}const l={display:"block",position:"static","box-sizing":"border-box","border-width":"1px","border-color":"transparent"},d={position:"relative",display:"flex"};class u{constructor(){const t=o("li"),e=o("a");i(t,e),s(t,l),s(e,d),r(t,"menu-item"),this.e=t,this.t=e}}const h="function-item-height",p="function-item-whitespace",m="frontground-color",f="whitespace-y";const g=(b="menu",function(t){return`var(--${b}-${t})`});var b;const w={position:"absolute",height:"100%",width:g(p)},x="f",y="r",v={cursor:"pointer",color:g(m),"background-color":"transparent"},k={color:g("active-frontground-color"),"background-color":g("active-background-color")},E={color:g("disabled-frontground-color"),"background-color":"transparent"},F={height:g(h)},C={display:"none"},L={"flex-grow":"1",padding:`0 ${g(p)}`};class T extends u{constructor(t,e){super();const l=this.t,d=o("span"),u=o("span");r(d,"menu-item-label"),r(u,"menu-item-icon"),s(d,L),s(l,F),s(u,C),i(l,u),i(l,d),this.l=d,this.F=!1,d.innerText="Text 4 test";const h=this.e;s(h,v),n(h,"mouseover",(()=>{a(h,c("-focus",this))}))}[y](){s(this.e,v),function(t,...e){t.classList.remove(...e)}(this.e,"focus"),this.F=!1}[x](){console.log("focusing",this.F),this.F||(s(this.e,k),r(this.e,"focus"),this.F=!0)}d(){s(this.e,E)}}const $={top:0,left:0};class B extends T{constructor(t){super();const l=this.t,d=o("span"),u=o("span");r(d,"menu-item-accelerator"),r(u,"menu-item-checkbox"),s(d,L),s(u,w,$),i(l,d),i(l,u),n(this.e,"click",(()=>{a(e,c("menu::-close"))}))}}const D={display:"block","border-bottom-width":"1px","border-bottom-style":"solid","border-bottom-color":g("spearator-color"),margin:`${g(f)} ${g("spearator-whitespace-x")}`};class N extends u{constructor(){super();const t=this.e;s(this.t,D),n(t,"mouseover",(()=>{a(t,c("-clear-focus",this))}))}static is(t){return t instanceof this}}const z={display:"block",position:"fixed",margin:"0",padding:`${g(f)} 0`,"font-size":"12px","white-space":"nowrap","border-width":"1px","border-style":"solid","line-height":g(h),"border-color":"transparent","background-color":g("background-color"),color:g(m),"user-select":"none",opacity:0,"transition-property":"opacity","transition-duration":"0.3s"},A="a",P="cF";class S{constructor(){const t=this,e=o("ul");s(e,z),r(e,"menu"),this.l=[],this.e=e,this.k=!1,this.C=()=>this.c(),n(e,"-focus",(e=>{e.stopPropagation(),t.k=!1,this.cF(e.data),e.data.f()})),n(e,"mouseleave",(()=>this.cF())),n(e,"-clear-focus",(()=>this.cF())),n(e,"-keeping",(()=>this.k=!0))}[P](t=null){this.k||this.l.filter((e=>!N.is(e)&&e!==t)).forEach((t=>t.r()))}s(){i(t.body,this.e),requestAnimationFrame((()=>s(this.e,{opacity:1}))),n(e,"menu::-close",this.C)}c(){var n,o;this.k=!1,n=t.body,o=this.e,n.removeChild(o),s(this.e,{opacity:0}),function(t,e,n){t.removeEventListener(e,n)}(e,"menu::-close",this.C),this.cF()}[A](t){this.l.push(t),i(this.e,t.e)}n(t=null){}p(t=null){}}const j={right:0,top:0};class q extends T{constructor(t){super(),console.log(this);const e=o("span");s(e,w,j),r(e,"menu-item-expanding"),i(this.t,e),this.sm=t,this.p=!1}[x](){super.f(),console.log(this.p),this.p||(this.p=!0,this.sm.s(),a(this.e,c("-keeping",this)))}[y](){super.r(),console.log(this.p),this.p&&(this.sm.c(),this.p=!1)}}window.addEventListener("load",(function(){const t=new S,e=new S,n=new B,o=new N,s=new B;e.a(n),e.a(o),e.a(s);const i=new B,r=new q(e),c=new B,a=new N;t.a(i),t.a(r),t.a(a),t.a(c),t.e.style.minWidth="200px",window.addEventListener("contextmenu",(e=>{e.preventDefault(),t.s(),console.log(t)}))}))}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
