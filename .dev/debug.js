!function(t,e){t.getElementById("livereloadscript")||((e=t.createElement("script")).async=1,e.src="//"+(window.location.host||"localhost").split(":")[0]+":35729/livereload.js?snipver=1",e.id="livereloadscript",t.getElementsByTagName("head")[0].appendChild(e))}(window.document),function(t){"function"==typeof define&&define.amd?define(t):t()}((function(){"use strict";!function(t,e){void 0===e&&(e={});var o=e.insertAt;if(t&&"undefined"!=typeof document){var n=document.head||document.getElementsByTagName("head")[0],r=document.createElement("style");r.type="text/css","top"===o&&n.firstChild?n.insertBefore(r,n.firstChild):n.appendChild(r),r.styleSheet?r.styleSheet.cssText=t:r.appendChild(document.createTextNode(t))}}(":root {\r\n\t--menu-function-item-height: 26px;\r\n\t--menu-function-item-whitespace: 26px;\r\n\r\n\t--menu-background-color: #999;\r\n\t--menu-frontground-color: #DDD;\r\n\t--menu-active-background-color: #66F;\r\n\t--menu-active-frontground-color: #fff;\r\n\t--menu-disabled-background-color: 'transparent';\r\n\t--menu-disabled-frontground-color: #999;\r\n\r\n\t--menu-outline-color: #000;\r\n\r\n\t--menu-spearator-color: #ccc;\r\n\t--menu-spearator-whitespace-x: 13px;\r\n\t--menu-spearator-whitespace-y: 5px;\r\n\t--menu-whitespace: 8px;\r\n}");const t=document;function e(t,e,o){t.addEventListener(e,o)}function o(e){return t.createElement(e)}function n(t,...e){for(const o of e)for(const e in o)t.style.setProperty(e,o[e])}function r(t,e){t.className=e}function s(t,e){t.appendChild(e)}function i(t,...e){t.classList.add(...e)}function c(t,e=null){const o=new Event(t,{bubbles:!0});return o.data=e,o}const a={display:"block",position:"static","box-sizing":"border-box","border-width":"1px","border-color":"transparent",cursor:"pointer"},l={position:"relative",display:"flex"};class d{constructor(){const t=o("li"),e=o("a");s(t,e),n(t,a),n(e,l),r(t,"menu-item"),this[0]=t,this[1]=e}}const u="function-item-height",p="function-item-whitespace",h="frontground-color",m="spearator-whitespace-x",f="spearator-whitespace-y";const b=(g="menu",function(t){return`var(--${g}-${t})`});var g;const x={position:"absolute",height:"100%",width:b(p)},w={color:b(h),"background-color":"transparent"},v={color:b("active-frontground-color"),"background-color":b("active-background-color")},y={color:b("disabled-frontground-color"),"background-color":"transparent"},k={height:b(u)},E={display:"none"},C={"flex-grow":"1",padding:`0 ${b(p)}`};class T extends d{constructor(){super();const t=this[1],i=o("span"),a=o("span");r(i,"menu-item-label"),r(a,"menu-item-icon"),n(i,C),n(t,k),n(a,E),s(t,a),s(t,i),this[3]=i,i.innerText="Text 4 test";const l=this[0];e(l,"mouseover",(()=>{l.dispatchEvent(c("-focus",this))})),this[5]()}5(){n(this[0],w),function(t,...e){t.classList.remove(...e)}(this[0],"focus")}4(){n(this[0],v),i(this[0],"focus")}6(){n(this[0],y)}}const B={top:0,left:0};class L extends T{constructor(t){super();const i=this[1],c=o("span"),a=o("span");r(c,"menu-item-accelerator"),r(a,"menu-item-checkbox"),n(c,C),n(a,x,B),s(i,c),s(i,a),e(this[0],"click",(()=>{}))}}const N={right:0,top:0};class $ extends T{constructor(){super();const t=o("span");n(t,x,N),i(t,"menu-item-expanding"),s(this[1],t)}}const D={display:"block","border-bottom-width":"1px","border-bottom-style":"solid","border-bottom-color":b("spearator-color"),"margin-left":b(m),"margin-right":b(m),"margin-top":b(f),"margin-bottom":b(f)};class z extends d{constructor(){super();const t=this[0];n(this[1],D),e(t,"mouseover",(()=>{t.dispatchEvent(c("-clear-focus",this))}))}}const P={display:"block",position:"fixed",margin:"0",padding:`${b("whitespace")} 0`,"font-size":"12px","white-space":"nowrap","border-width":"1px","border-style":"solid","line-height":b(u),"border-color":"transparent","background-color":b("background-color"),color:b(h),"user-select":"none"},S="a";class j{constructor(){const t=o("ul"),s=[];function i(){s.filter((t=>!(t instanceof z))).forEach((t=>t[5]()))}n(t,P),r(t,"menu"),this.l=s,this.e=t,e(t,"-focus",(t=>{t.stopPropagation(),i(),t.data[4]()})),e(t,"mouseleave",i),e(t,"-clear-focus",i)}s(){s(t.body,this.e)}c(){var e,o;e=t.body,o=this.e,e.removeChild(o)}[S](t){this.l.push(t),s(this.e,t[0])}n(t=null){}p(t=null){}}window.addEventListener("load",(function(){const t=new j,e=new L,o=new $,n=new z;t.a(e),t.a(o),t.a(n),t.e.style.minWidth="200px",t.s()}))}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
